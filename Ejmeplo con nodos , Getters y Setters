
#include <iostream>
#include <string>
using namespace std;

// Clase que contiene los datos personales
class Dato {
private:
    int codigo;
    string nombre;
    string carrera;

public:
    // Constructor por defecto
    Dato() {
        codigo = 0;
        nombre = "Unknown";
        carrera = "Unknown";
    }

    // Setters
    void setCodigo(int c) { codigo = c; }
    void setNombre(const string& n) { nombre = n; }
    void setCarrera(const string& c) { carrera = c; }

    // Getters
    int getCodigo() const { return codigo; }
    string getNombre() const { return nombre; }
    string getCarrera() const { return carrera; }
};

// Clase Nodo para lista enlazada
class Nodo {
private:
    Dato dato;
    Nodo* puntero;

public:
    // Constructor
    Nodo() {
        puntero = nullptr;
    }

    // Acceso a dato y puntero
    void setDato(const Dato& d) { dato = d; }
    Dato getDato() const { return dato; }

    void setPuntero(Nodo* p) { puntero = p; }
    Nodo* getPuntero() const { return puntero; }

    // Métodos estáticos
    static void Encolar(Nodo*& inicio, Nodo*& fin) {
        Nodo* nuevo = new Nodo();
        Dato d;
        int codigo;
        string nombre, carrera;

        cout << "Codigo: ";
        cin >> codigo;
        cin.ignore();
        cout << "Nombre: ";
        getline(cin, nombre);
        cout << "Carrera: ";
        getline(cin, carrera);

        d.setCodigo(codigo);
        d.setNombre(nombre);
        d.setCarrera(carrera);
        nuevo->setDato(d);

        if (inicio == nullptr) {
            inicio = fin = nuevo;
        }
        else {
            fin->setPuntero(nuevo);
            fin = nuevo;
        }
    }

    static void MostrarLista(Nodo* inicio) {
        if (inicio == nullptr) {
            cout << "La lista está vacía.\n";
            return;
        }

        Nodo* actual = inicio;
        while (actual != nullptr) {
            Dato d = actual->getDato();
            cout << "\nCódigo: " << d.getCodigo() << endl;
            cout << "Nombre: " << d.getNombre() << endl;
            cout << "Carrera: " << d.getCarrera() << endl;
            cout << "--------------------------\n";
            actual = actual->getPuntero();
        }
    }

    static void EliminarPorCodigo(Nodo*& inicio, Nodo*& fin, int codigo) {
        Nodo* actual = inicio;
        Nodo* anterior = nullptr;

        while (actual != nullptr && actual->getDato().getCodigo() != codigo) {
            anterior = actual;
            actual = actual->getPuntero();
        }

        if (actual == nullptr) {
            cout << "No se encontró un nodo con ese código.\n";
            return;
        }

        if (anterior == nullptr) {
            inicio = actual->getPuntero();
            if (inicio == nullptr) fin = nullptr;
        }
        else {
            anterior->setPuntero(actual->getPuntero());
            if (actual == fin) fin = anterior;
        }

        delete actual;
        cout << "Nodo eliminado correctamente.\n";
    }
};

// Función principal
int main() {
    Nodo* inicio = nullptr;
    Nodo* fin = nullptr;
    int opcion;

    do {
        cout << "\n----- MENU -----\n";
        cout << "1. ¿La lista está vacía?\n";
        cout << "2. Encolar (Agregar elemento)\n";
        cout << "3. Mostrar lista\n";
        cout << "4. Eliminar por código\n";
        cout << "5. Salir\n";
        cout << "Opción: ";
        cin >> opcion;

        switch (opcion) {
        case 1:
            cout << (inicio == nullptr ? "La lista está vacía.\n" : "La lista contiene elementos.\n");
            break;
        case 2:
            Nodo::Encolar(inicio, fin);
            break;
        case 3:
            Nodo::MostrarLista(inicio);
            break;
        case 4: {
            int cod;
            cout << "Ingrese el código del nodo a eliminar: ";
            cin >> cod;
            Nodo::EliminarPorCodigo(inicio, fin, cod);
            break;
        }
        case 5:
            cout << "Saliendo del programa.\n";
            break;
        default:
            cout << "Opción inválida.\n";
        }
    } while (opcion != 5);

    return 0;
}
