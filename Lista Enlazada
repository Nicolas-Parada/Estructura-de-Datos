#pragma once
#include <string>
#include <iostream>
using namespace std;

class Datos
{
    private:
        int codigo;
        string nombre;
        string carrera;

    public:
        // Constructor por defecto
        Datos();

            // Setters
            void setCodigo(int c);
            void setNombre(const string& n);
            void setCarrera(const string& c);

        // Getters
            int getCodigo() const;
            string getNombre() const;
            string getCarrera() const;
};

#include "Datos.h"
#include <iostream>
#include <string>

using namespace std;

        // Constructor por defecto
        Datos::Datos() {
            codigo = 0;
            nombre = "Unknown";
            carrera = "Unknown";
        }

        // Setters
    void Datos::setCodigo(int c) { codigo = c; }
    void Datos::setNombre(const string& n) { nombre = n; }
    void Datos::setCarrera(const string& c) { carrera = c; }

    // Getters
    int Datos::getCodigo() const { return codigo; }
    string Datos::getNombre() const { return nombre; }
    string Datos::getCarrera() const { return carrera; }


#pragma once
#include <iostream>
#include <string>
#include "Datos.h"

using namespace std;

class Nodo
{
        private:
            Datos datos;
            Nodo* puntero;

        public:
            // Constructor
            Nodo();

            // Acceso a dato y puntero
            void setDatos(const Datos& d);
            Datos getDatos() const;

            void setPuntero(Nodo* p);
            Nodo* getPuntero() const;

            // Métodos estáticos
            static void Encolar(Nodo*& inicio, Nodo*& fin);

            static void MostrarLista(Nodo* inicio);

            static void EliminarPorCodigo(Nodo*& inicio, Nodo*& fin, int codigo);
    };
#include "Nodo.h"
#include <iostream>
#include <string>
#include "Datos.h"

using namespace std;

    // Constructor
   Nodo::Nodo() {
        puntero = nullptr;
    }

    // Acceso a dato y puntero
    void Nodo::setDatos(const Datos& d) { datos = d; }
    Datos Nodo::getDatos() const { return datos; }

    void Nodo::setPuntero(Nodo* p) { puntero = p; }
    Nodo* Nodo::getPuntero() const { return puntero; }

    // Métodos estáticos
    void Nodo::Encolar(Nodo*& inicio, Nodo*& fin) {
        Nodo* nuevo = new Nodo();
        Datos d;
        int codigo;
        string nombre, carrera;

        cout << "Codigo: ";
        cin >> codigo;
        cin.ignore();
        cout << "Nombre: ";
        getline(cin, nombre);
        cout << "Carrera: ";
        getline(cin, carrera);

        d.setCodigo(codigo);
        d.setNombre(nombre);
        d.setCarrera(carrera);
        nuevo->setDatos(d);

        if (inicio == nullptr) {
            inicio = fin = nuevo;
        }
        else {
            fin->setPuntero(nuevo);
            fin = nuevo;
        }
    }

   void Nodo::MostrarLista(Nodo* inicio) {
        if (inicio == nullptr) {
            cout << "La lista está vacía.\n";
            return;
        }

        Nodo* actual = inicio;
        while (actual != nullptr) {
            Datos d = actual->getDatos();
            cout << "\nCódigo: " << d.getCodigo() << endl;
            cout << "Nombre: " << d.getNombre() << endl;
            cout << "Carrera: " << d.getCarrera() << endl;
            cout << "--------------------------\n";
            actual = actual->getPuntero();
        }
    }

    void Nodo::EliminarPorCodigo(Nodo*& inicio, Nodo*& fin, int codigo) {
        Nodo* actual = inicio;
        Nodo* anterior = nullptr;

        while (actual != nullptr && actual->getDatos().getCodigo() != codigo) {
            anterior = actual;
            actual = actual->getPuntero();
        }

        if (actual == nullptr) {
            cout << "No se encontró un nodo con ese código.\n";
            return;
        }

        if (anterior == nullptr) {
            inicio = actual->getPuntero();
            if (inicio == nullptr) fin = nullptr;
        }
        else {
            anterior->setPuntero(actual->getPuntero());
            if (actual == fin) fin = anterior;
        }

        delete actual;
        cout << "Nodo eliminado correctamente.\n";
    }
#include <iostream>
#include <string>
#include "Datos.h"
#include "Nodo.h"
using namespace std;

// Función principal
int main() {
    Nodo* inicio = nullptr;
    Nodo* fin = nullptr;
    int opcion;

    do {
        cout << "\n----- MENU -----\n";
        cout << "1. ¿La lista está vacía?\n";
        cout << "2. Encolar (Agregar elemento)\n";
        cout << "3. Mostrar lista\n";
        cout << "4. Eliminar por código\n";
        cout << "5. Salir\n";
        cout << "Opción: ";
        cin >> opcion;

        switch (opcion) {
        case 1:
            cout << (inicio == nullptr ? "La lista está vacía.\n" : "La lista contiene elementos.\n");
            break;
        case 2:
            Nodo::Encolar(inicio, fin);
            break;
        case 3:
            Nodo::MostrarLista(inicio);
            break;
        case 4: {
            int cod;
            cout << "Ingrese el código del nodo a eliminar: ";
            cin >> cod;
            Nodo::EliminarPorCodigo(inicio, fin, cod);
            break;
        }
        case 5:
            cout << "Saliendo del programa.\n";
            break;
        default:
            cout << "Opción inválida.\n";
        }
    } while (opcion != 5);

    return 0;
}
